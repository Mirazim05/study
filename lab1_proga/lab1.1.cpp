#include <iostream>
#include <string>
#include <algorithm>

/*
Стандартная библиотека языка С++ включает класс string,
предназначенного для работы с массивом символов. Этот класс более безопасен в использовании, чем С-строка, 
функции для работы с которой также доступны.
В строках типа string завершающий символ не добавляется в массив, но может содержаться в массиве, как и любой другой символ. 
Инструментарий класса string более чем достаточен, чтобы не прибегать к работе со строкой в стиле Си.

1) strlen - в языке C считает, сколько символов в строке. Аналог в C++ - length()
2) strcpy - Функция strcpy копирует strSource, включая завершающий символ нуля, в указанное расположение.  В C++ то же самое
3) strcmp - сравнивает поочередно каждую пару символов, и продолжается это до тех пор, пока не будут найдены различные символы или не будет достигнут конец строки. В C++ то же самое
4) strcat - Объединяет две строки в языке C. В C++ то же самое.
5) someString[index] - … (getting the character at index) Получить доступ к строке и её символу по индексу. В c++
6) Добавить элемент в конец списка в C++ - push_back. В C реализуется, но нет специального обозначения.
7) Удалить элемент из конца списка в C++ - pop_back. В C реализуется, но нет специального обозначения.
Вывод: В C++ было добавлено множество синтаксических конструкций, которые делают нашу работу со строками гораздо проще и удобнее.
*/

int main() {
    std::string str;
    std::cout << "Vvedite stroku: ";
    std::getline(std::cin, str);

    // Удаление пробелов и знаков препинания
    str.erase(std::remove_if(str.begin(), str.end(), [](char c) {
        return std::isspace(c) || std::ispunct(c);
        }), str.end());

    // Сортировка букв в алфавитном порядке
    std::sort(str.begin(), str.end());

    std::cout << "Result: " << str << std::endl;

    return 0;
}