#include <iostream>

#include <random>
#include <ctime>
#include <iomanip>

template<typename T>
int findSecondMaxIndex(T* array, int size) {
    if (size < 2) {
        std::cerr << "Размер массива должен быть не меньше 2" << std::endl;
        return -1;
    }

    int maxIndex = 0;
    int secondMaxIndex = -1;

    // Находим индекс максимального элемента
    for (int i = 1; i < size; ++i) {
        if (array[i] > array[maxIndex])
            maxIndex = i;
    }

    // Находим индекс второго максимального элемента
    for (int i = 0; i < size; ++i) {
        if (i != maxIndex) {
            if (secondMaxIndex == -1 || array[i] > array[secondMaxIndex])
                secondMaxIndex = i;
        }
    }

    return secondMaxIndex;
}


#include <iostream>
#include <iomanip>

template<typename T>
class Matrix {
private:
    unsigned int m; // Строки
    unsigned int n; // Столбцы 
    T** data;

public:
    // Конструктор
    Matrix(unsigned int m, unsigned int n) : m(m), n(n) {
        data = new T * [m];
        for (unsigned int i = 0; i < m; ++i) {
            data[i] = new T[n];
        }
    }

    // Деструктор
    ~Matrix() {
        for (unsigned int i = 0; i < m; ++i) {
            delete[] data[i];
        }
        delete[] data;
    }

    // Заполнение матрицы случайными значениями
    void fillRandom() {
        std::srand(std::time(nullptr));
        for (unsigned int i = 0; i < m; ++i) {
            for (unsigned int j = 0; j < n; ++j) {
                data[i][j] = static_cast<T>(rand() % 10);
            }
        }
    }

    // Оператор вывода для int
    friend std::ostream& operator<<(std::ostream& os, const Matrix<int>& matrix);

    // Оператор вывода для float
    friend std::ostream& operator<<(std::ostream& os, const Matrix<float>& matrix);

    // Оператор вывода для double
    friend std::ostream& operator<<(std::ostream& os, const Matrix<double>& matrix);
};

// Определение оператора вывода для int
std::ostream& operator<<(std::ostream& os, const Matrix<int>& matrix) {
    for (unsigned int i = 0; i < matrix.m; ++i) {
        std::cout << " " << std::endl;
        for (unsigned int j = 0; j < matrix.n; ++j) {
            os << std::setw(3) << matrix.data[i][j] << " | ";
        }
        os << '\n';
    }
    return os;
}

// Оператор вывода для float
std::ostream& operator<<(std::ostream& os, const Matrix<float>& matrix) {
    for (unsigned int i = 0; i < matrix.m; ++i) {
        std::cout << " " << std::endl;
        for (unsigned int j = 0; j < matrix.n; ++j) {
            os << std::fixed << std::setprecision(2) << matrix.data[i][j] << " | ";
        }
        os << '\n';
    }
    return os;
}

// Оператор вывода для double
std::ostream& operator<<(std::ostream& os, const Matrix<double>& matrix) {
    for (unsigned int i = 0; i < matrix.m; ++i) {
        std::cout << " " << std::endl;
        for (unsigned int j = 0; j < matrix.n; ++j) {
            os << std::fixed << std::setprecision(2) << matrix.data[i][j] << " | ";
        }
        os << '\n';
    }
    return os;
}


template<typename T>
class Vector {
private:
    unsigned int size;
    T* data;

public:
    // Конструктор
    Vector(unsigned int size) : size(size) {
        data = new T[size];
    }

    // Деструктор
    ~Vector() {
        delete[] data;
    }

    // Оператор доступа к элементу вектора по индексу
    T& operator[](unsigned int index) {
        return data[index];
    }

    // Метод для заполнения вектора случайными значениями
    void fillRandom() {
        std::srand(std::time(nullptr));
        for (unsigned int i = 0; i < size; ++i) {
            data[i] = static_cast<T>(rand() % 10);
        }
    }

    // Метод для вывода вектора
    friend std::ostream& operator<<(std::ostream& os, const Vector<T>& vec) {
        for (unsigned int i = 0; i < vec.size; ++i) {
            os << std::setw(3) << vec.data[i] << " | ";
        }
        return os;
    }

    // Метод для вычисления скалярного произведения
    template<typename U>
    T scalarProduct(const Vector<U>& other) const {
        T result = 0;
        for (unsigned int i = 0; i < size; ++i) {
            result += data[i] * other.data[i];
        }
        return result;
    }

    // Метод для вычисления векторного произведения
    template<typename U>
    Vector<T> crossProduct(const Vector<U>& other) const {
        // Проверяем, что размерность векторов совпадает
        if (size != 3 || other.size != 3) {
            throw std::invalid_argument("Cross product is defined only for 3-dimensional vectors.");
        }

        Vector<T> result(3);
        result[0] = data[1] * other.data[2] - data[2] * other.data[1];
        result[1] = data[2] * other.data[0] - data[0] * other.data[2];
        result[2] = data[0] * other.data[1] - data[1] * other.data[0];
        return result;
    }
};






int main() {
    setlocale(LC_ALL, "rus");
    // Пример использования
    int intArray[] = { 1, 5, 3, 9, 7 };
    int intIndex = findSecondMaxIndex(intArray, 5);
    std::cout << "Индекс второго максимального элемента в целочисленном массиве: " << intIndex << std::endl;

    float floatArray[] = { (float)1.5, (float)2.3, (float)3.7, (float)2.9, (float)4.1 };
    int floatIndex = findSecondMaxIndex(floatArray, 5);
    std::cout << "Индекс второго максимального элемента в массиве вещественных чисел: " << floatIndex << std::endl;

    double doubleArray[] = { 2.7, 4.5, 1.2, 5.6, 3.8 };
    int doubleIndex = findSecondMaxIndex(doubleArray, 5);
    std::cout << "Индекс второго максимального элемента в массиве двойной точности: " << doubleIndex << std::endl;

    char charArray[] = { 'a', 'c', 'b', 'e', 'd' };
    int charIndex = findSecondMaxIndex(charArray, 5);
    std::cout << "Индекс второго максимального элемента в массиве символов: " << charIndex << std::endl;


    // Тест для целочисленной матрицы
    Matrix<int> intMatrix(3, 3);
    intMatrix.fillRandom();
    std::cout << "Целочисленная матрица:" << std::endl;
    std::cout << intMatrix << std::endl;

    // Тест для матрицы с плавающей точкой одинарной точности
    Matrix<float> floatMatrix(3, 3);
    floatMatrix.fillRandom();
    std::cout << "Матрица с плавающей точкой одинарной точности:" << std::endl;
    std::cout << floatMatrix << std::endl;

    // Тест для матрицы с плавающей точкой двойной точности
    Matrix<double> doubleMatrix(3, 3);
    doubleMatrix.fillRandom();
    std::cout << "Матрица с плавающей точкой двойной точности:" << std::endl;
    std::cout << doubleMatrix << std::endl;


    // Создание вектора и заполнение случайными значениями
    Vector<int> vec1(5);
    vec1.fillRandom();
    std::cout << "Вектор 1: " << vec1 << std::endl;

    // Проверка доступа к элементам вектора и изменение значений
    vec1[2] = 10;
    std::cout << "Измененный вектор 1: " << vec1 << std::endl;

    // Создание второго вектора и заполнение случайными значениями
    Vector<int> vec2(5);
    vec2.fillRandom();
    std::cout << "Вектор 2: " << vec2 << std::endl;

    // Проверка скалярного произведения
    int scalarProduct = vec1.scalarProduct(vec2);
    std::cout << "Скалярное произведение вектора 1 и вектора 2: " << scalarProduct << std::endl;

    // Проверка векторного произведения (для трехмерных векторов)
    Vector<double> vec3(3);
    vec3[0] = 1.0; vec3[1] = 2.0; vec3[2] = 3.0;
    Vector<double> vec4(3);
    vec4[0] = 4.0; vec4[1] = 5.0; vec4[2] = 6.0;

    Vector<double> crossProduct = vec3.crossProduct(vec4);
    std::cout << "Векторное произведение вектора 3 и вектора 4: " << crossProduct << std::endl;



    return 0;
}